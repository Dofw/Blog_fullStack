@import "./sass_variable.scss"; // 主题：背景、蒙层(正反色)、文本(正反色)、code、主题色(vue中的绿色，不同环境的亮度)

// 利用scss方案实现, 对兼容性友好。
// css变量，仅仅操作变量，而不会增加规则。
$themes: (
  dark: (
    vt-c-bg: map-get($variable, vt-c-black),
    vt-c-bg-soft: map-get($variable, vt-c-black-soft),
    vt-c-bg-mute: map-get($variable, vt-c-black-mute),
    vt-c-divider: map-get($variable, vt-c-divider-dark-1),
    vt-c-divider-light: map-get($variable, vt-c-divider-dark-2),
    vt-c-divider-inverse: map-get($variable, vt-c-divider-light-1),
    vt-c-divider-inverse-light: map-get($variable, vt-c-divider-light-2),
    vt-c-text-1: map-get($variable, vt-c-text-dark-1),
    vt-c-text-2: map-get($variable, vt-c-text-dark-2),
    vt-c-text-3: map-get($variable, vt-c-text-dark-3),
    vt-c-text-4: map-get($variable, vt-c-text-dark-4),
    vt-c-text-code: map-get($variable, vt-c-text-dark-code),
    vt-c-text-inverse-1: map-get($variable, vt-c-text-light-1),
    vt-c-text-inverse-2: map-get($variable, vt-c-text-light-2),
    vt-c-text-inverse-3: map-get($variable, vt-c-text-light-3),
    vt-c-text-inverse-4: map-get($variable, vt-c-text-light-4),
    vt-c-brand: map-get($variable, vt-c-green),
    vt-c-brand-light: map-get($variable, vt-c-green-dark),
    vt-c-brand-highlight: map-get($variable, vt-c-green-darker)
  ),
  light: (
    vt-c-bg: map-get($variable, vt-c-white),
    vt-c-bg-soft: map-get($variable, vt-c-white-soft),
    vt-c-bg-mute: map-get($variable, vt-c-white-mute),
    vt-c-divider: map-get($variable, vt-c-divider-light-1),
    vt-c-divider-light: map-get($variable, vt-c-divider-light-2),
    vt-c-divider-inverse: map-get($variable, vt-c-divider-dark-1),
    vt-c-divider-inverse-light: map-get($variable, vt-c-divider-dark-2),
    vt-c-text-1: map-get($variable, vt-c-text-light-1),
    vt-c-text-2: map-get($variable, vt-c-text-light-2),
    vt-c-text-3: map-get($variable, vt-c-text-light-3),
    vt-c-text-4: map-get($variable, vt-c-text-light-4),
    vt-c-text-code: map-get($variable, vt-c-text-light-code),
    vt-c-text-inverse-1: map-get($variable, vt-c-text-dark-1),
    vt-c-text-inverse-2: map-get($variable, vt-c-text-dark-2),
    vt-c-text-inverse-3: map-get($variable, vt-c-text-dark-3),
    vt-c-text-inverse-4: map-get($variable, vt-c-text-dark-4),
    vt-c-brand: map-get($variable, vt-c-green),
    vt-c-brand-light: map-get($variable, vt-c-green-light),
    vt-c-brand-highlight: map-get($variable, vt-c-green-lighter)
  )
);

// sass 主题切换实现的核心代码
// 使用 @mixin font_color($color)，对应生成两套。 [data-theme="#{$theme-name}"]
@mixin generateThemesCode {
  @each $theme-name, $theme-map in $themes {
    //!global 把局部变量强升为全局变量, 原因，外部函数在用。
    $theme-map: $theme-map !global;
    //判断html的data-theme的属性值  #{}是sass的插值表达式
    //& sass嵌套里的父容器标识   @content是混合器插槽，像vue的slot
    .data-theme-#{$theme-name} & {
      @content;
    }
    // 该问题，编译之后 [data-theme=dark]，不带双引号。无效。
    // [data-theme="#{$theme-name}"] & {
    //   @content;
    // }
  }
}

//声明一个根据Key获取颜色的function, 次里面的$theme-map 来之 !global。
@function themed($theme-map, $key) {
  @return map-get($theme-map, $key);
}

@mixin theme_bg_color($color) {
  @include generateThemesCode {
    background-color: themed($theme-map, $color) !important;
  }
}

@mixin theme_font_color($key) {
  @include generateThemesCode {
    color: themed($theme-map, $key) !important;
  }
}

// // 这里有顺序， 在调用了@include theme_font_color("background_color3"); 全局才有 $theme-map (global)
// ul {
//   color: map-get($variable,$theme-map, "background_color3");
// }
