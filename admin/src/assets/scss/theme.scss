@import "./variable.scss"; // 主题：背景、蒙层(正反色)、文本(正反色)、code、主题色(vue中的绿色，不同环境的亮度)

// 利用scss方案实现, 对兼容性友好：
$themes: (
  dark: (
    vt-c-bg: var(--vt-c-black),
    vt-c-bg-soft: var(--vt-c-black-soft),
    vt-c-bg-mute: var(--vt-c-black-mute),
    vt-c-divider: var(--vt-c-divider-dark-1),
    vt-c-divider-light: var(--vt-c-divider-dark-2),
    vt-c-divider-inverse: var(--vt-c-divider-light-1),
    vt-c-divider-inverse-light: var(--vt-c-divider-light-2),
    vt-c-text-1: var(--vt-c-text-dark-1),
    vt-c-text-2: var(--vt-c-text-dark-2),
    vt-c-text-3: var(--vt-c-text-dark-3),
    vt-c-text-4: var(--vt-c-text-dark-4),
    vt-c-text-code: var(--vt-c-text-dark-code),
    vt-c-text-inverse-1: var(--vt-c-text-light-1),
    vt-c-text-inverse-2: var(--vt-c-text-light-2),
    vt-c-text-inverse-3: var(--vt-c-text-light-3),
    vt-c-text-inverse-4: var(--vt-c-text-light-4),
    vt-c-brand: var(--vt-c-green),
    vt-c-brand-light: var(--vt-c-green-dark),
    vt-c-brand-highlight: var(--vt-c-green-darker)
  ),
  light: (
    vt-c-bg: var(--vt-c-white),
    vt-c-bg-soft: var(--vt-c-white-soft),
    vt-c-bg-mute: var(--vt-c-white-mute),
    vt-c-divider: var(--vt-c-divider-light-1),
    vt-c-divider-light: var(--vt-c-divider-light-2),
    vt-c-divider-inverse: var(--vt-c-divider-dark-1),
    vt-c-divider-inverse-light: var(--vt-c-divider-dark-2),
    vt-c-text-1: var(--vt-c-text-light-1),
    vt-c-text-2: var(--vt-c-text-light-2),
    vt-c-text-3: var(--vt-c-text-light-3),
    vt-c-text-4: var(--vt-c-text-light-4),
    vt-c-text-code: var(--vt-c-text-light-code),
    vt-c-text-inverse-1: var(--vt-c-text-dark-1),
    vt-c-text-inverse-2: var(--vt-c-text-dark-2),
    vt-c-text-inverse-3: var(--vt-c-text-dark-3),
    vt-c-text-inverse-4: var(--vt-c-text-dark-4),
    vt-c-brand: var(--vt-c-green),
    vt-c-brand-light: var(--vt-c-green-light),
    vt-c-brand-highlight: var(--vt-c-green-lighter)
  )
);

// 使用 @mixin font_color($color)，对应生成两套。
@mixin generateThemesCode {
  @each $theme-name, $theme-map in $themes {
    //!global 把局部变量强升为全局变量
    $theme-map: $theme-map !global;
    //判断html的data-theme的属性值  #{}是sass的插值表达式
    //& sass嵌套里的父容器标识   @content是混合器插槽，像vue的slot
    [data-theme="#{$theme-name}"] & {
      @content;
    }
  }
}

//声明一个根据Key获取颜色的function
@function themed($key) {
  @return map-get($theme-map, $key);
}

@mixin font_color($color) {
  @include themeify {
    color: themed($color) !important;
  }
}

// 下面的是css 变量模式：
// .dark {
//   --vt-c-bg: var(--vt-c-black);
//   --vt-c-bg-soft: var(--vt-c-black-soft);
//   --vt-c-bg-mute: var(--vt-c-black-mute);
//   --vt-c-divider: var(--vt-c-divider-dark-1);
//   --vt-c-divider-light: var(--vt-c-divider-dark-2);
//   --vt-c-divider-inverse: var(--vt-c-divider-light-1);
//   --vt-c-divider-inverse-light: var(--vt-c-divider-light-2);
//   --vt-c-text-1: var(--vt-c-text-dark-1);
//   --vt-c-text-2: var(--vt-c-text-dark-2);
//   --vt-c-text-3: var(--vt-c-text-dark-3);
//   --vt-c-text-4: var(--vt-c-text-dark-4);
//   --vt-c-text-code: var(--vt-c-text-dark-code);
//   --vt-c-text-inverse-1: var(--vt-c-text-light-1);
//   --vt-c-text-inverse-2: var(--vt-c-text-light-2);
//   --vt-c-text-inverse-3: var(--vt-c-text-light-3);
//   --vt-c-text-inverse-4: var(--vt-c-text-light-4);
//   --vt-c-brand: var(--vt-c-green);
//   --vt-c-brand-light: var(--vt-c-green-dark);
//   --vt-c-brand-highlight: var(--vt-c-green-darker);
// }

// .light {
//   --vt-c-bg: var(--vt-c-white);
//   --vt-c-bg-soft: var(--vt-c-white-soft);
//   --vt-c-bg-mute: var(--vt-c-white-mute);
//   --vt-c-divider: var(--vt-c-divider-light-1);
//   --vt-c-divider-light: var(--vt-c-divider-light-2);
//   --vt-c-divider-inverse: var(--vt-c-divider-dark-1);
//   --vt-c-divider-inverse-light: var(--vt-c-divider-dark-2);
//   --vt-c-text-1: var(--vt-c-text-light-1);
//   --vt-c-text-2: var(--vt-c-text-light-2);
//   --vt-c-text-3: var(--vt-c-text-light-3);
//   --vt-c-text-4: var(--vt-c-text-light-4);
//   --vt-c-text-code: var(--vt-c-text-light-code);
//   --vt-c-text-inverse-1: var(--vt-c-text-dark-1);
//   --vt-c-text-inverse-2: var(--vt-c-text-dark-2);
//   --vt-c-text-inverse-3: var(--vt-c-text-dark-3);
//   --vt-c-text-inverse-4: var(--vt-c-text-dark-4);
//   --vt-c-brand: var(--vt-c-green);
//   --vt-c-brand-light: var(--vt-c-green-light);
//   --vt-c-brand-highlight: var(--vt-c-green-lighter);
// }

// sass 主题切换实现的核心代码，
// $themes: (
//   light: (
//     //字体
//     font_color1: #414141,
//     font_color2: white,
//     //背景
//     background_color1: #fff,
//     background_color2: #f0f2f5,
//     background_color3: red,
//     background_color4: #2674e7,
//     //边框
//     border_color1: #3d414a
//   ),
//   dark: (
//     //字体
//     font_color1: #a7a7a7,
//     font_color2: white,
//     //背景
//     background_color1: #1b2531,
//     background_color2: #283142,
//     background_color3: #1e6ceb,
//     background_color4: #323e4e,
//     //边框
//     border_color1: #3d414a
//   )
// );

// @mixin themeify {
//   @each $theme-name, $theme-map in $themes {
//     //!global 把局部变量强升为全局变量
//     $theme-map: $theme-map !global;
//     //判断html的data-theme的属性值  #{}是sass的插值表达式
//     //& sass嵌套里的父容器标识   @content是混合器插槽，像vue的slot
//     [data-theme="#{$theme-name}"] & {
//       @content;
//     }
//   }
// }

// @mixin font_color($color) {
//   @include themeify {
//     color: themed($color) !important;
//   }
// }

// //声明一个根据Key获取颜色的function
// @function themed($key) {
//   @return map-get($theme-map, $key);
// }

// div {
//   div {
//     @include font_color("background_color3");
//   }
// }
// p {
//   font-size: 12px;
//   @include font_color("background_color3");
// }

// // 这里有顺序， 在调用了@include font_color("background_color3"); 全局才有 $theme-map (global)
// ul {
//   color: map-get($theme-map, "background_color3");
// }
